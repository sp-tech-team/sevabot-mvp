name: Deploy Sevabot to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vcd-tech/sevabot-mvp-gradio
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push the docker images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Install Nginx
      run: |
        # Install Nginx if not installed
        if ! command -v nginx &> /dev/null; then
          echo "Installing Nginx..."
          sudo apt-get update
          sudo apt-get install -y nginx
        fi
        
        # Create directories if they don't exist
        sudo mkdir -p /etc/nginx/sites-available
        sudo mkdir -p /etc/nginx/sites-enabled
        
    - name: Deploy Container
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: vcd-tech/sevabot-mvp-gradio
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Stop any existing container
        docker stop sevabot-container 2>/dev/null || true
        docker rm sevabot-container 2>/dev/null || true
        
        # Run the container with environment variables
        docker run -d \
          --name sevabot-container \
          -p 8001:8001 \
          --restart always \
          -e SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
          -e SUPABASE_KEY="${{ secrets.SUPABASE_KEY }}" \
          -e SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
          -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
          -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
          -e COOKIE_SECRET="${{ secrets.COOKIE_SECRET }}" \
          -e COOKIE_NAME="${{ secrets.COOKIE_NAME }}" \
          -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          -e REDIRECT_URI="${{ secrets.REDIRECT_URI }}" \
          -e APP_HOST="${{ secrets.APP_HOST }}" \
          -e ALLOWED_DOMAIN="${{ secrets.ALLOWED_DOMAIN }}" \
          -v /home/ubuntu/sevabot_data/user_documents:/app/user_documents \
          -v /home/ubuntu/sevabot_data/rag_index:/app/rag_index \
          -v /home/ubuntu/sevabot_data/common_knowledge:/app/common_knowledge \
          $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Configure Nginx
        echo "Creating Nginx configuration..."
        cat > /tmp/sevabot_nginx << 'EOL'
        server {
            listen 8080;
            server_name _;
            
            # Increase client body size for file uploads
            client_max_body_size 100M;
            
            location / {
                proxy_pass http://localhost:8001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_cache_bypass $http_upgrade;
                proxy_read_timeout 300;
                proxy_connect_timeout 300;
                proxy_send_timeout 300;
            }
        }
        EOL
        
        sudo cp /tmp/sevabot_nginx /etc/nginx/sites-available/sevabot
        sudo ln -sf /etc/nginx/sites-available/sevabot /etc/nginx/sites-enabled/
        sudo rm -f /etc/nginx/sites-enabled/default 2>/dev/null || true
        sudo nginx -t
        sudo systemctl restart nginx